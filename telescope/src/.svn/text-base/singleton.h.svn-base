//
// C++ Interface: singleton
//
// Description:
//
//
// Author: donglongchao <donglongchao@163.com>, (C) 2009
//
// Copyright: See COPYING file that comes with this distribution
//
//

#include <memory> //for auto_ptr
//#include <tr1/cstdint> //for int32_t,if you want to use cstdint directly,you must add -std=c++0x as a option for gcc.
template <class T>
class Singleton
{
	public:
		static inline T& instance();
		static inline T* instance_p();
		static inline void release();
	private:
		Singleton ( void ) {}
		~Singleton ( void ) {}
		Singleton ( const Singleton& );
		Singleton & operator= ( const Singleton & );

		static  std::auto_ptr<T> _instance;
};

template <class T>
std::auto_ptr<T> Singleton<T>::_instance;

template <class T>
inline T& Singleton<T>::instance()
{
	static T instance;
	return instance;
}

template <class T>
inline T* Singleton<T>::instance_p()
{qDebug("newbg");
       if( 0== _instance.get())
       {	qDebug("newwwww");
              _instance.reset ( new T);
       }

       return _instance.get();

}

template <class T>
inline void Singleton<T>::release()
{
	_instance.release();
}
//Class that will implement the singleton mode,
//must use the macro in it's delare file

#define DECLARE_SINGLETON_CLASS( type ) \
friend class std::auto_ptr< type >;\
friend class Singleton< type >;

